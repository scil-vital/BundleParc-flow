
params {
    outdir = "output/"
    publish_dir_mode = "copy"
    singularity_pull_docker_container = false

    test_data_remote = "https://scil.usherbrooke.ca"
    test_database_path = "scil_test_data/dvc-store/files/md5"
    test_data_associations = new groovy.json.JsonSlurper().parse(
        new File("$projectDir/tests/test_data.json")
    )
}

report {
    enabled = true
    file = "$launchDir/report.html"
    overwrite = true
}


includeConfig "$projectDir/config/resources.config"
includeConfig "$projectDir/tests/config/nextflow.config"

def check_max (obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


import com.sun.management.OperatingSystemMXBean
import java.lang.management.ManagementFactory

def query_container_limits (type) {
    if (type == 'memory') {
        try {
            def memory_limit = System.getenv("DEVCONTAINER_RAM_LIMIT_GB")
            if (memory_limit) {
                return "${memory_limit}.GB"
            } else {
                def sysmem = ((
                    (OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean()
                ).getTotalPhysicalMemorySize() / 1073741824).toInteger()
                return "${sysmem}.GB"
            }
        } catch (all) {
            return 0.GB
        }
    } else if (type == 'cpus') {
        try {
            def cpu_limit = System.getenv("DEVCONTAINER_CPU_LIMIT")
            if (cpu_limit) {
                return cpu_limit as int
            } else {
                return Runtime.runtime.availableProcessors() as int
            }
        } catch (all) {
            return 1
        }
    }
}
